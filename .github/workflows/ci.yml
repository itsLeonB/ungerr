name: CI

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    strategy:
      matrix:
        go-version: ["1.23", "1.24", "1.25"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go with cache
        uses: ./.github/actions/setup-go
        with:
          go-version: ${{ matrix.go-version }}

      - name: Verify dependencies
        run: |
          go mod verify
          cd test && go mod verify

      - name: Run tests
        run: make test-coverage

      - name: Upload coverage to Codecov
        if: matrix.go-version == '1.25'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          flags: unittests
          fail_ci_if_error: false
          verbose: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go with cache
        uses: ./.github/actions/setup-go
        with:
          go-version-file: "go.mod"

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          args: --timeout=5m

  build:
    name: Build
    runs-on: ubuntu-latest

    strategy:
      matrix:
        go-version: ["1.23", "1.24", "1.25"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go with cache
        uses: ./.github/actions/setup-go
        with:
          go-version: ${{ matrix.go-version }}

      - name: Build
        run: go build -v ./...

      - name: Build test package
        run: cd test && go build -v ./...

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go with cache
        uses: ./.github/actions/setup-go
        with:
          go-version-file: "go.mod"

      - name: Install and Run Gosec
        run: |
          # Install gosec using go install with correct repository
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          # Run gosec and create SARIF output
          $(go env GOPATH)/bin/gosec -fmt sarif -out results.sarif -exclude-dir=gen ./... || true
          # Ensure the SARIF file exists even if gosec finds issues
          if [ ! -f results.sarif ]; then
            echo '{"version":"2.1.0","runs":[{"tool":{"driver":{"name":"gosec","version":"unknown"}},"results":[]}]}' > results.sarif
          fi

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif
        if: always() && hashFiles('results.sarif') != ''
